/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snakegame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;


/**
 *
 * @author gillmylady
 */
public class Client extends javax.swing.JFrame {

    private ArrayList<OnePlayer> players;
    private ArrayList<OnePlayer> lastPlayers;
    private PrintWriter out;
    private int direction;
    private String name;
    private OnePlayer myself;
    private Apple apple;
    
    private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
            } else if (e.getID() == KeyEvent.KEY_RELEASED) {
                getKeyDirection(e);
            } else if (e.getID() == KeyEvent.KEY_TYPED) {
            }
            return false;
        }
    }
    
    public Client() {
        initComponents();
        initGame();
        
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMap = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaPlayers = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jTextFieldName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanelMapLayout = new javax.swing.GroupLayout(jPanelMap);
        jPanelMap.setLayout(jPanelMapLayout);
        jPanelMapLayout.setHorizontalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelMapLayout.setVerticalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jTextAreaPlayers.setColumns(20);
        jTextAreaPlayers.setRows(5);
        jScrollPane1.setViewportView(jTextAreaPlayers);

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setText("Log:");
        jScrollPane2.setViewportView(jTextAreaLog);

        jTextFieldName.setText("My Name");
        jTextFieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldName)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNameActionPerformed
        // TODO add your handling code here:
        name = jTextFieldName.getText();
        out.println(PublicData.newPlayer + ":" + name);                         //send new player command
        jTextFieldName.setEditable(false);                                                  //only one time     
    }//GEN-LAST:event_jTextFieldNameActionPerformed

    public void initGame(){
        jPanelMap.setBackground(Color.green);
        jPanelMap.setPreferredSize(new Dimension(PublicData.WIDTH, PublicData.HEIGHT));
        jTextAreaPlayers.setEditable(false);
        jTextAreaLog.setEditable(false);
        this.setVisible(true);
        
        this.players = new ArrayList<>();
        this.lastPlayers = new ArrayList<>();
        
        this.myself = new OnePlayer(Color.white);
        this.apple = new Apple();
    }
    
    public void getKeyDirection(KeyEvent e){
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                direction = PublicData.UP;
                break;
            case KeyEvent.VK_DOWN:
                direction = PublicData.DOWN;
                break;
            case KeyEvent.VK_LEFT:
                direction = PublicData.LEFT;
                break;
            case KeyEvent.VK_RIGHT:
                direction = PublicData.RIGHT;
                break;
            default:                            // do nothing
                direction = myself.getDirection();
                break;
        }
        sendDirectionToServer();                //whenever there is key respond, send the direction to server for update
    }
    
    public void printLog(String s){
        jTextAreaLog.append("\n" + s);
    }
    
    public static void main(String args[]) throws Exception{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Client client = new Client();
                try {
                    client.runSocket();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                
            }
        });
        */
        Client client = new Client();
        try {
            client.runSocket();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
}
    
    public void runSocket() throws Exception{
        
        Socket socket = new Socket("localhost", PublicData.port);
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        out = new PrintWriter(socket.getOutputStream(),true);
        printLog("client starts");
        printLog("please input your name");
        
        while(true){
            String line = in.readLine();
            if(line == null)
                continue;
            printLog("read line: " + line);
            String[] liveData = line.split(";");
            
            lastPlayers.clear();                    //backup lastPlayers, to make refresh map more effeiciently
            lastPlayers.addAll(players);
            
            //reset current players from server
            players.clear();
            for(String s : liveData){
                OnePlayer player = new OnePlayer(Color.white);
                player.setFromString(s);
                players.add(player);
                if(name.equalsIgnoreCase(player.getName())){
                    myself.setFromString(s);
                }
            }
            refreshLiveScore();
            refreshLiveMap();
        }
    }
    
    //refresh live score of left-down text area
    private void refreshLiveScore(){
        String liveScore = "";
        
        for(OnePlayer player : players){
            liveScore = liveScore + player.getName() + ": " + Integer.toString(player.getSnakeSize()) + "\n";
        }
        jTextAreaPlayers.setText(liveScore);
    }
    
    //refresh live map of the game
    private void refreshLiveMap(){
        
        for(OnePlayer player : players){                                //for each player
            if(player.getPlayerStatus() == PublicData.PLAYER_NEW){      //if this player is a new player
                for(OnePlayer lp : lastPlayers){
                    if(lp.getName().equalsIgnoreCase(player.getName())){   
                        lp.clear(jPanelMap.getGraphics());                  //clear old one
                    }
                }
            }else if(player.getPlayerStatus() == PublicData.PLAYER_REMOVETAIL){ //if this player need remove tail
                for(OnePlayer lp : lastPlayers){
                    if(lp.getName().equalsIgnoreCase(player.getName())){
                        lp.removeSnakeTail(jPanelMap.getGraphics());            //remove tail of this player
                    }
                }
            }
            player.paintSnakeBodies(jPanelMap.getGraphics());                   //paint this snake; some painting work is unnecessary
            
        }
        apple.setPosition(myself.getApplePosition());                           //set app position
        apple.drawApple(jPanelMap.getGraphics());                               //draw apple in the map
        
    }
    
    //send real time direction to server
    private void sendDirectionToServer(){
        myself.setDirection(direction, myself.getLastDirection());
        if(myself.getDirection() != myself.getLastDirection()) {     //if direction not change, no need to updaate at server side
            printLog("Send direction to host: " + PublicData.newDirection + ":" + Integer.toString(myself.getDirection()));
            out.println(PublicData.newDirection + ":" + Integer.toString(myself.getDirection()));
        }
    }
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelMap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaPlayers;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables
}
